// Generated by gencpp from file robot_arm_urdf/StepperCommand.msg
// DO NOT EDIT!


#ifndef ROBOT_ARM_URDF_MESSAGE_STEPPERCOMMAND_H
#define ROBOT_ARM_URDF_MESSAGE_STEPPERCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_arm_urdf
{
template <class ContainerAllocator>
struct StepperCommand_
{
  typedef StepperCommand_<ContainerAllocator> Type;

  StepperCommand_()
    : target_steps()  {
    }
  StepperCommand_(const ContainerAllocator& _alloc)
    : target_steps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _target_steps_type;
  _target_steps_type target_steps;





  typedef boost::shared_ptr< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StepperCommand_

typedef ::robot_arm_urdf::StepperCommand_<std::allocator<void> > StepperCommand;

typedef boost::shared_ptr< ::robot_arm_urdf::StepperCommand > StepperCommandPtr;
typedef boost::shared_ptr< ::robot_arm_urdf::StepperCommand const> StepperCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_arm_urdf::StepperCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_arm_urdf::StepperCommand_<ContainerAllocator1> & lhs, const ::robot_arm_urdf::StepperCommand_<ContainerAllocator2> & rhs)
{
  return lhs.target_steps == rhs.target_steps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_arm_urdf::StepperCommand_<ContainerAllocator1> & lhs, const ::robot_arm_urdf::StepperCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_arm_urdf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d72fea468f87b18315af10edfcc7c9bf";
  }

  static const char* value(const ::robot_arm_urdf::StepperCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd72fea468f87b183ULL;
  static const uint64_t static_value2 = 0x15af10edfcc7c9bfULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_arm_urdf/StepperCommand";
  }

  static const char* value(const ::robot_arm_urdf::StepperCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] target_steps\n"
;
  }

  static const char* value(const ::robot_arm_urdf::StepperCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_steps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StepperCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_arm_urdf::StepperCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_arm_urdf::StepperCommand_<ContainerAllocator>& v)
  {
    s << indent << "target_steps[]" << std::endl;
    for (size_t i = 0; i < v.target_steps.size(); ++i)
    {
      s << indent << "  target_steps[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.target_steps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ARM_URDF_MESSAGE_STEPPERCOMMAND_H
